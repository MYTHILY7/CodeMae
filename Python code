import os
import logging
from bs4 import BeautifulSoup

# Setup logging format
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def extract_product_text(soup):
    """
    Extracts the product value from loan disclosure section using table or <p> tags.
    """
    # Method 1: Check if product is within <tr><td>Product</td><td>...</td>
    for row in soup.find_all("tr"):
        cols = row.find_all("td")
        if len(cols) >= 2 and "product" in cols[0].get_text(strip=True).lower():
            product = cols[1].get_text(strip=True)
            if product:
                return product.lower()

    # Method 2: Fallback to <p> tags where product label is followed by value
    paragraphs = soup.find_all("p")
    for i, p in enumerate(paragraphs):
        if "product" == p.get_text(strip=True).lower():
            for j in range(i + 1, min(i + 4, len(paragraphs))):
                val = paragraphs[j].get_text(strip=True)
                if val and val.lower() not in ["loan type", "loan term", "purpose"]:
                    return val.lower()
    return None

def extract_note_div(soup):
    """
    Locates the <div class='Page'> containing the NOTE section.
    """
    for heading in soup.find_all(['h1', 'h2', 'h3']):
        if heading.get_text(strip=True).lower() == "note":
            return heading.find_parent("div", class_="Page")
    return None

def extract_footer_text(note_div):
    """
    Extracts all text in the footer area of the NOTE section.
    """
    if not note_div:
        return None
    footer_elements = note_div.find_all(['footer', 'p', 'span', 'div'])
    combined_text = " ".join(el.get_text(separator=' ', strip=True) for el in footer_elements)
    return combined_text.lower()

def process_file(filepath):
    """
    Process a single HTML file to check if product type appears in the NOTE footer.
    """
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            soup = BeautifulSoup(f, 'html.parser')

        product_text = extract_product_text(soup)
        if not product_text:
            logging.error(f'FAIL: Product type line not found in LOAN DISCLOSURE section of file: {os.path.basename(filepath)}')
            return

        note_div = extract_note_div(soup)
        if not note_div:
            logging.error(f'FAIL: NOTE section not found in file: {os.path.basename(filepath)}')
            return

        footer_text = extract_footer_text(note_div)
        if not footer_text:
            logging.error(f'FAIL: Footer not found in NOTE section of file: {os.path.basename(filepath)}')
            return

        if product_text in footer_text:
            logging.info(f'PASS: Product "{product_text}" matched in NOTE footer for file: {os.path.basename(filepath)}')
        else:
            logging.error(f'FAIL: Product "{product_text}" NOT found in NOTE footer for file: {os.path.basename(filepath)}')

    except Exception as e:
        logging.error(f'FAIL: Error processing file {os.path.basename(filepath)} - {str(e)}')

# Main execution
if __name__ == "__main__":
    html_files = ['pdf1.html', 'pdf10.html', 'pdf1454.html']
    for html_file in html_files:
        process_file(html_file)
