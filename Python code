from bs4 import BeautifulSoup
import re
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")


def is_valid_note_block(note_block):
    """
    Check if this block contains actual NOTE content based on key legal section headers.
    """
    keywords = [
        "BORROWER'S PROMISE TO PAY",
        "INTEREST",
        "PAYMENTS",
        "BORROWER'S RIGHT TO PREPAY"
    ]
    text = note_block.get_text().upper()
    match_count = sum(1 for kw in keywords if kw in text)
    return match_count >= 2


def extract_valid_note_block_and_footer(html_content):
    """
    Extract the correct NOTE block, its footer, and page number.
    """
    soup = BeautifulSoup(html_content, "html.parser")
    pages = soup.find_all("div", class_="Page")

    for page in pages:
        page_number = page.get("data-page-number", "Unknown")

        # Look for H1 tag titled NOTE
        h1_note = page.find("h1", string=re.compile(r'\bNOTE\b', re.IGNORECASE))
        if h1_note and is_valid_note_block(page):
            logging.info(f"‚úÖ Valid NOTE block found on page {page_number}")

            # Try <footer> first
            footer = page.find("footer")
            if footer:
                footer_text = footer.get_text(separator=" ").strip()
            else:
                # Try <p> or <span> at end
                footer_text = ""
                for tag in reversed(page.find_all(["p", "span"])[-10:]):
                    text = tag.get_text().strip()
                    if re.search(r"(UNIFORM INSTRUMENT|Fannie Mae|F\d{4,}|F3200|FIXED RATE NOTE)", text, re.IGNORECASE):
                        footer_text = text
                        break

            return page_number, page.prettify(), footer_text

    logging.warning("No valid NOTE block found.")
    return None, None, None


def compare_product_with_note_footer(html_content, product_value_from_cd):
    """
    Compare footer text with product value and return result.
    """
    page_number, note_html, footer_text = extract_valid_note_block_and_footer(html_content)

    if not footer_text:
        logging.error("‚ùå No footer found in NOTE block.")
        return False

    # Print results
    print(f"\nüìÑ NOTE Block found on Page {page_number}")
    print("=" * 60)
    print(note_html)
    print("=" * 60)
    print(f"\nüìå Extracted Footer Text:\n{footer_text}")
    print(f"\nüìå Product from CD:\n{product_value_from_cd}")

    # Normalize for case-insensitive comparison
    match = product_value_from_cd.lower() in footer_text.lower()

    if match:
        logging.info("‚úÖ Product matches the footer.")
    else:
        logging.error("‚ùå Product does NOT match the footer.")

    return match


# -------------------- Example Usage --------------------

if __name__ == "__main__":
    # Load your HTML file
    with open("your_html_file.html", "r", encoding="utf-8") as file:
        html_data = file.read()

    # Example CD product value
    product_value_from_cd = "F3200v21NOTL 0522"

    result = compare_product_with_note_footer(html_data, product_value_from_cd)
    print("\nFinal Result:", "‚úÖ Match" if result else "‚ùå Mismatch")
