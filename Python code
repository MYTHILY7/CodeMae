import os
import logging
from bs4 import BeautifulSoup

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s: %(message)s"
)
logger = logging.getLogger(__name__)

def extract_product_type(soup):
    """
    Extract the loan product type from the document by searching for keywords like 'fixed rate',
    'adjustable rate', etc. from the Loan Disclosure section or anywhere in the file.
    """
    keywords = ['fixed rate', 'adjustable rate', 'interest only', 'step rate', 'balloon', 'graduated']
    all_text = soup.get_text(separator=' ', strip=True).lower()
    for word in keywords:
        if word in all_text:
            return word
    return None

def extract_note_page(soup):
    """
    Extract the NOTE section's page block (i.e., div with class Page containing 'NOTE' title).
    Also print the full HTML of that page.
    """
    for heading in soup.find_all(['h1', 'h2', 'h3']):
        if heading.get_text(strip=True).lower() == "note":
            page_div = heading.find_parent('div', class_='Page')
            if page_div:
                page_number = page_div.get('data-page-number', 'N/A')
                print(f"\nðŸ§© Found NOTE on Page Number: {page_number}")
                print("â”€â”€â”€â”€â”€â”€â”€â”€ HTML BLOCK START â”€â”€â”€â”€â”€â”€â”€â”€")
                print(page_div.prettify())
                print("â”€â”€â”€â”€â”€â”€â”€â”€ HTML BLOCK END â”€â”€â”€â”€â”€â”€â”€â”€")
                return page_div
    return None

def extract_footer_product_text(note_page):
    """
    Extract the footer content from NOTE section page.
    """
    footer = note_page.find('footer')
    if not footer:
        return None
    return footer.get_text(separator=' ', strip=True).lower()

def process_html_file(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        soup = BeautifulSoup(f, "html.parser")

    product_type = extract_product_type(soup)
    if not product_type:
        logger.error(f"FAIL: Product type not identified in file: {os.path.basename(file_path)}")
        return

    note_page = extract_note_page(soup)
    if not note_page:
        logger.error(f"FAIL: NOTE section not found in file: {os.path.basename(file_path)}")
        return

    footer_text = extract_footer_product_text(note_page)
    if not footer_text:
        logger.error(f"FAIL: Footer not found in NOTE section of file: {os.path.basename(file_path)}")
        return

    if product_type in footer_text:
        logger.info(f"PASS: Product line matched in footer of file: {os.path.basename(file_path)}")
    else:
        logger.error(f"FAIL: Product line did not match footer in file: {os.path.basename(file_path)}")

def process_directory(directory_path):
    for filename in os.listdir(directory_path):
        if filename.endswith(".html"):
            file_path = os.path.join(directory_path, filename)
            process_html_file(file_path)

# Run on current directory
if __name__ == "__main__":
    directory_path = "./"
    process_directory(directory_path)
