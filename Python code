import os
import logging
from bs4 import BeautifulSoup

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def extract_product_text(soup):
    """Extract the product type value from loan disclosure section"""
    for row in soup.find_all("tr"):
        cols = row.find_all("td")
        if len(cols) >= 2 and "product" in cols[0].get_text(strip=True).lower():
            return cols[1].get_text(separator=" ", strip=True).strip().lower()

    paragraphs = soup.find_all("p")
    for i, p in enumerate(paragraphs):
        if p.get_text(strip=True).lower() == "product":
            for j in range(i + 1, min(i + 5, len(paragraphs))):
                val = paragraphs[j].get_text(strip=True).lower()
                if val and val not in ["loan type", "loan term", "purpose"]:
                    return val
    return None

def extract_note_div(soup):
    """Locate NOTE section block inside div.Page"""
    for heading in soup.find_all(['h1', 'h2', 'h3']):
        if heading.get_text(strip=True).lower() == "note":
            page_div = heading.find_parent("div", class_="Page")
            if page_div:
                return page_div
    return None

def extract_footer_text(note_div):
    """Extract text from NOTE section footer"""
    if not note_div:
        return None
    text_blocks = note_div.find_all(['footer', 'p', 'span', 'div'])
    return " ".join(tag.get_text(separator=' ', strip=True).lower() for tag in text_blocks)

def process_file(filepath):
    """Process each HTML file to validate product type in NOTE footer"""
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            soup = BeautifulSoup(file, 'html.parser')

        product = extract_product_text(soup)
        if not product:
            logging.error(f'FAIL: Product type line not found in LOAN DISCLOSURE section of file: {os.path.basename(filepath)}')
            return

        note_div = extract_note_div(soup)
        if not note_div:
            logging.error(f'FAIL: NOTE section not found in file: {os.path.basename(filepath)}')
            return

        # Print NOTE block content and page number
        page_number = note_div.get('data-page-number', 'Unknown')
        print(f"\nðŸ”Ž NOTE section from file: {os.path.basename(filepath)} | Page Number: {page_number}")
        print("-" * 80)
        print(note_div.prettify())
        print("-" * 80)

        footer_text = extract_footer_text(note_div)
        if not footer_text:
            logging.error(f'FAIL: Footer not found in NOTE section of file: {os.path.basename(filepath)}')
            return

        if product.lower() in footer_text:
            logging.info(f'PASS: Product \"{product}\" matched in NOTE footer for file: {os.path.basename(filepath)}')
        else:
            logging.error(f'FAIL: Product \"{product}\" NOT found in NOTE footer for file: {os.path.basename(filepath)}')

    except Exception as e:
        logging.error(f'FAIL: Error processing file {os.path.basename(filepath)} - {str(e)}')

# ---------- MAIN ----------
if __name__ == "__main__":
    html_files = ['pdf1.html', 'pdf10.html', 'pdf1454.html']
    for file in html_files:
        process_file(file)
