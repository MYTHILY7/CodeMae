import os
import logging
from bs4 import BeautifulSoup

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')


def extract_product_type(soup):
    """Find the exact line where 'Product:' or 'Product' label is followed by a value"""
    text_blocks = soup.find_all(string=True)
    for i, text in enumerate(text_blocks):
        lower = text.lower().strip()
        if lower.startswith("product:"):
            return lower.replace("product:", "").strip()
        if lower == "product" and i + 1 < len(text_blocks):
            next_text = text_blocks[i + 1].strip()
            if next_text and len(next_text.split()) < 6:
                return next_text.lower()
    return None


def extract_note_page(soup):
    """Find the div.Page containing 'NOTE' in any heading"""
    for heading in soup.find_all(['h1', 'h2', 'h3']):
        if heading.get_text(strip=True).lower() == "note":
            page_div = heading.find_parent('div', class_='Page')
            if page_div:
                return page_div
    return None


def footer_contains_product(note_div, product_text):
    """Check if the product string appears in the footer or end text"""
    tags_to_search = note_div.find_all(['footer', 'p', 'span', 'div'])
    for tag in tags_to_search:
        text = tag.get_text(separator=' ', strip=True).lower()
        if product_text in text:
            return True
    return False


def process_html_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        soup = BeautifulSoup(content, 'html.parser')

        # Step 1: Get product type
        product_text = extract_product_type(soup)
        if not product_text:
            return f'❌ FAIL: Product type not found in file: {os.path.basename(file_path)}'

        # Step 2: Get NOTE section
        note_div = extract_note_page(soup)
        if not note_div:
            return f'❌ FAIL: NOTE section not found in file: {os.path.basename(file_path)}'

        # Step 3: Check product type match in footer
        if footer_contains_product(note_div, product_text):
            return f'✅ PASS: Product "{product_text}" matched in NOTE footer for file: {os.path.basename(file_path)}'
        else:
            return f'❌ FAIL: Product "{product_text}" NOT found in NOTE footer for file: {os.path.basename(file_path)}'

    except Exception as e:
        return f'❌ FAIL: Error processing file {os.path.basename(file_path)} - {str(e)}'


# ----------- Usage ------------

if __name__ == "__main__":
    html_files = [
        'pdf1.html',
        'pdf10.html',
        'pdf1454.html'
    ]

    for file in html_files:
        result = process_html_file(file)
        print(result)
