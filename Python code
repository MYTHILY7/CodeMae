import os
import logging
from bs4 import BeautifulSoup

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s: %(message)s"
)
logger = logging.getLogger(__name__)

def extract_product_type(soup):
    """
    Extract the loan product type from the Loan Disclosure section.
    """
    loan_disclosure_section = soup.find('h1', string=lambda t: t and 'loan disclosure' in t.lower())
    if not loan_disclosure_section:
        return None

    section = loan_disclosure_section.find_parent('div', class_='Page')
    if not section:
        return None

    for p in section.find_all(['p', 'span', 'div']):
        if 'product' in p.get_text(strip=True).lower():
            return p.get_text(strip=True)
    return None

def extract_note_page(soup):
    """
    Find and return the <div class="Page"> containing the NOTE section (h1/h2/h3 tag with text 'NOTE').
    Also print the entire block for debug with page number.
    """
    for heading in soup.find_all(['h1', 'h2', 'h3']):
        if heading.get_text(strip=True).lower() == "note":
            page_div = heading.find_parent('div', class_='Page')
            if page_div:
                page_number = page_div.get('data-page-number', 'N/A')
                print(f"\nðŸ§© Found NOTE on Page Number: {page_number}")
                print("â”€â”€â”€â”€â”€â”€â”€â”€ HTML BLOCK START â”€â”€â”€â”€â”€â”€â”€â”€")
                print(page_div.prettify())
                print("â”€â”€â”€â”€â”€â”€â”€â”€ HTML BLOCK END â”€â”€â”€â”€â”€â”€â”€â”€")
                return page_div
    return None

def extract_footer_product_text(note_page):
    """
    Extract footer text from the NOTE page.
    """
    footer = note_page.find('footer')
    if not footer:
        return None
    footer_text = footer.get_text(separator=' ', strip=True)
    return footer_text

def process_html_file(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        soup = BeautifulSoup(f, "html.parser")

    product_text = extract_product_type(soup)
    if not product_text:
        logger.error(f"FAIL: Product type line not found in LOAN DISCLOSURE section of file: {os.path.basename(file_path)}")
        return

    note_page = extract_note_page(soup)
    if not note_page:
        logger.error(f"FAIL: NOTE section not found in file: {os.path.basename(file_path)}")
        return

    footer_text = extract_footer_product_text(note_page)
    if not footer_text:
        logger.error(f"FAIL: Footer not found in NOTE section of file: {os.path.basename(file_path)}")
        return

    product_keyword = None
    for word in product_text.split():
        if word.lower() in footer_text.lower():
            product_keyword = word
            break

    if product_keyword:
        logger.info(f"PASS: Product line matched in footer of file: {os.path.basename(file_path)}")
    else:
        logger.error(f"FAIL: Product line did not match footer in file: {os.path.basename(file_path)}")

def process_directory(directory_path):
    for filename in os.listdir(directory_path):
        if filename.endswith(".html"):
            file_path = os.path.join(directory_path, filename)
            process_html_file(file_path)

# Example usage
if __name__ == "__main__":
    directory_path = "./"  # or change to your HTML directory
    process_directory(directory_path)
