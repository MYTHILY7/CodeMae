import os
import logging
from bs4 import BeautifulSoup

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def extract_product_text(soup):
    # Try structured <tr><td>Product</td><td>Value</td>
    for row in soup.find_all("tr"):
        cols = row.find_all("td")
        if len(cols) >= 2 and "product" in cols[0].get_text(strip=True).lower():
            return cols[1].get_text(strip=True).lower()

    # Fallback: Try <p> tags in sequence
    ps = soup.find_all("p")
    for i, p in enumerate(ps):
        if p.get_text(strip=True).lower() == "product":
            for j in range(i + 1, min(i + 5, len(ps))):
                val = ps[j].get_text(strip=True)
                if val and val.lower() not in ["loan type", "loan term", "purpose"] and len(val.split()) <= 5:
                    return val.lower()
    return None

def extract_note_div(soup):
    for heading in soup.find_all(['h1', 'h2', 'h3']):
        if heading.get_text(strip=True).lower() == "note":
            return heading.find_parent("div", class_="Page")
    return None

def get_footer_text(note_div):
    if not note_div:
        return None
    footer_parts = note_div.find_all(['footer', 'p', 'span', 'div'])
    combined = " ".join(tag.get_text(separator=' ', strip=True) for tag in footer_parts)
    return combined.lower()

def process_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            html = f.read()
        soup = BeautifulSoup(html, 'html.parser')

        # Extract product text
        product_text = extract_product_text(soup)
        if not product_text:
            logging.error(f'FAIL: Product type line not found in LOAN DISCLOSURE section of file: {os.path.basename(file_path)}')
            return

        # Extract NOTE div and footer text
        note_div = extract_note_div(soup)
        if not note_div:
            logging.error(f'FAIL: NOTE section not found in file: {os.path.basename(file_path)}')
            return

        footer_text = get_footer_text(note_div)
        if not footer_text:
            logging.error(f'FAIL: Footer not found in NOTE section of file: {os.path.basename(file_path)}')
            return

        # Check match
        if product_text in footer_text:
            logging.info(f'PASS: Product "{product_text}" matched in NOTE footer for file: {os.path.basename(file_path)}')
        else:
            logging.error(f'FAIL: Product "{product_text}" NOT found in NOTE footer for file: {os.path.basename(file_path)}')

    except Exception as e:
        logging.error(f'FAIL: Error processing {os.path.basename(file_path)} - {str(e)}')

# -------- Main Execution --------
if __name__ == "__main__":
    files = ['pdf1.html', 'pdf10.html', 'pdf1454.html']
    for file in files:
        process_file(file)
