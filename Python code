import os
import logging
from bs4 import BeautifulSoup

# Logging configuration
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def extract_product_text(soup):
    # Method 1: Table format
    for row in soup.find_all("tr"):
        cells = row.find_all("td")
        if len(cells) >= 2:
            label = cells[0].get_text(strip=True).lower()
            value = cells[1].get_text(strip=True)
            if "product" == label and value:
                print(f"\nüîé Extracted Product (from <tr>): \"{value.strip()}\"")
                print("üì¶ Product Block (from <tr>):")
                print("-" * 60)
                print(row.prettify())
                print("-" * 60)
                return value.lower()

    # Method 2: <p> layout
    paragraphs = soup.find_all("p")
    for i, p in enumerate(paragraphs):
        if p.get_text(strip=True).lower() == "product":
            for j in range(i+1, min(i+5, len(paragraphs))):
                val = paragraphs[j].get_text(strip=True)
                if val and val.lower() not in ["loan term", "loan type", "purpose"]:
                    print(f"\nüîé Extracted Product (from <p>): \"{val.strip()}\"")
                    print("üì¶ Product Block (from <p>):")
                    print("-" * 60)
                    print(p.prettify())
                    print(paragraphs[j].prettify())
                    print("-" * 60)
                    return val.lower()

    print("‚ùå Product block not found")
    return None

def extract_note_div(soup):
    for heading in soup.find_all(['h1', 'h2', 'h3']):
        if heading.get_text(strip=True).lower() == "note":
            page_div = heading.find_parent("div", class_="Page")
            if page_div:
                print(f"\nüìÑ Found NOTE section on page: {page_div.get('data-page-number', 'Unknown')}")
                print("-" * 60)
                print(page_div.prettify())
                print("-" * 60)
                return page_div
    print("‚ùå NOTE section block not found")
    return None

def extract_footer_text(note_div):
    if not note_div:
        return ""
    elements = note_div.find_all(['footer', 'p', 'span', 'div'])
    combined = " ".join(el.get_text(separator=" ", strip=True) for el in elements)
    print("\nüì¶ Extracted Footer Text:")
    print("-" * 60)
    print(combined.strip())
    print("-" * 60)
    return combined.lower()

def process_file(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            soup = BeautifulSoup(f, 'html.parser')

        print(f"\nüîç Processing file: {os.path.basename(filepath)}")
        product = extract_product_text(soup)
        if not product:
            logging.error(f'FAIL: Product type line not found in LOAN DISCLOSURE section of file: {os.path.basename(filepath)}')
            return

        note_div = extract_note_div(soup)
        if not note_div:
            logging.error(f'FAIL: NOTE section not found in file: {os.path.basename(filepath)}')
            return

        footer_text = extract_footer_text(note_div)
        if not footer_text:
            logging.error(f'FAIL: Footer not found in NOTE section of file: {os.path.basename(filepath)}')
            return

        if product in footer_text:
            logging.info(f'PASS: Product \"{product}\" matched in NOTE footer for file: {os.path.basename(filepath)}')
        else:
            logging.error(f'FAIL: Product \"{product}\" NOT found in NOTE footer for file: {os.path.basename(filepath)}')

    except Exception as e:
        logging.error(f'FAIL: Error processing file {os.path.basename(filepath)} - {str(e)}')

# -------------------------
if __name__ == "__main__":
    html_files = ['pdf1.html', 'pdf10.html', 'pdf1454.html']
    for file in html_files:
        process_file(file)
